{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/cbrn/Desktop/Proyectos/React/website/src/pages/Emojipedia.js\";\nimport React, { Component } from 'react';\nimport Emojis from '../components/emojipedia/Emojis';\nimport SearchBar from '../components/emojipedia/SearchBar';\nimport Categories from '../components/emojipedia/Categories';\nimport { Container, Row, Col, Jumbotron } from 'react-bootstrap';\nconst API = \"https://emoji-api.com/emojis?search=\";\nconst API_KEY = \"449c678a53f59994d5c40248fa1a724196920bd8\";\n\nclass Emojipedia extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: '',\n      datos: [],\n      categories: [],\n      isLoaded: false\n    };\n\n    this.componentDidMount = async () => {\n      await this.fetchSearch(this.state.search);\n      await this.searchCategories();\n    };\n  }\n\n  fetchSearch(search) {\n    let url = `${API}${search}&access_key=${API_KEY}`;\n    fetch(url).then(res => res.json()).then(data => {\n      if (typeof data !== 'undefined' || typeof data.lenght < 1) {\n        this.setState({\n          datos: data.filter(dato => dato.group !== \"flags\"),\n          isLoaded: true\n        });\n      } else {\n        this.setState({\n          data: null,\n          isLoaded: false\n        });\n      }\n    });\n  }\n\n  fetchCategory(category) {\n    let url = `https://emoji-api.com/categories/${category}?access_key=${API_KEY}`;\n    fetch(url).then(res => res.json()).then(data => {\n      if (typeof data !== 'undefined') {\n        this.setState({\n          datos: data,\n          isLoaded: true\n        });\n      } else {\n        this.setState({\n          datos: null,\n          isLoaded: false\n        });\n      }\n    });\n  }\n\n  searchCategories() {\n    let url = `https://emoji-api.com/categories?access_key=${API_KEY}`;\n    fetch(url).then(res => res.json()).then(data => {\n      if (typeof data !== 'undefined' || data.lenght !== null) {\n        this.setState({\n          categories: data.filter(dato => dato.slug !== \"component\" && dato.slug !== \"flags\"),\n          error: false\n        });\n      } else {\n        this.setState({\n          error: true,\n          categories: null\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      search,\n      datos,\n      isLoaded,\n      categories\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, \"Emojipedia \\uD83C\\uDF0D\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"Emojipedia is a project who contains all posibles Emojis in the world.\"), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, \"Click on a Emoji to copy it!\"))), /*#__PURE__*/React.createElement(Row, {\n      md: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, {\n      fetchEmoji: this.fetchSearch.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, \"Categories\"), /*#__PURE__*/React.createElement(Categories, {\n      action: this.fetchCategory.bind(this),\n      data: categories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Emojis, {\n      loaded: isLoaded,\n      search: search,\n      data: datos,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Emojipedia;","map":{"version":3,"sources":["/mnt/c/Users/cbrn/Desktop/Proyectos/React/website/src/pages/Emojipedia.js"],"names":["React","Component","Emojis","SearchBar","Categories","Container","Row","Col","Jumbotron","API","API_KEY","Emojipedia","state","search","datos","categories","isLoaded","componentDidMount","fetchSearch","searchCategories","url","fetch","then","res","json","data","lenght","setState","filter","dato","group","fetchCategory","category","slug","error","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Emojis from '../components/emojipedia/Emojis';\r\nimport SearchBar from '../components/emojipedia/SearchBar';\r\nimport Categories from '../components/emojipedia/Categories';\r\n\r\n\r\nimport { Container, Row, Col, Jumbotron } from 'react-bootstrap';\r\n\r\nconst API = \"https://emoji-api.com/emojis?search=\";\r\nconst API_KEY = \"449c678a53f59994d5c40248fa1a724196920bd8\";\r\n\r\nclass Emojipedia extends Component {\r\n\r\n  state = {\r\n    search: '',\r\n    datos: [],\r\n    categories: [],\r\n    isLoaded: false\r\n  }\r\n\r\n\r\n\r\n  fetchSearch(search){\r\n\r\n    let url = `${API}${search}&access_key=${API_KEY}`;\r\n\r\n    fetch(url)\r\n    .then((res) => res.json() )\r\n    .then((data) => {\r\n      if(typeof data !== 'undefined' || typeof data.lenght < 1){\r\n        this.setState({\r\n          datos: data.filter(dato => dato.group !== \"flags\"),\r\n          isLoaded: true,\r\n        })\r\n      }else{\r\n        this.setState({\r\n          data: null,\r\n          isLoaded: false\r\n        })\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  fetchCategory(category){\r\n\r\n    let url = `https://emoji-api.com/categories/${category}?access_key=${API_KEY}`;\r\n\r\n    fetch(url)\r\n    .then((res) => res.json() )\r\n    .then((data) => {\r\n      if(typeof data !== 'undefined'){\r\n        this.setState({\r\n          datos: data,\r\n          isLoaded: true,\r\n        })\r\n      }else{\r\n        this.setState({\r\n          datos: null,\r\n          isLoaded: false\r\n        })\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  searchCategories(){\r\n\r\n    let url = `https://emoji-api.com/categories?access_key=${API_KEY}`;\r\n\r\n    fetch(url)\r\n    .then((res) => res.json() )\r\n    .then((data) => {\r\n      if(typeof data !== 'undefined' || data.lenght !== null){\r\n        this.setState({\r\n          categories: data.filter(dato => dato.slug !== \"component\" && dato.slug !== \"flags\"),\r\n          error: false\r\n        })\r\n      }else{\r\n        this.setState({\r\n          error: true,\r\n          categories: null,\r\n        })\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    await this.fetchSearch(this.state.search);\r\n    await this.searchCategories();\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n    const {search, datos, isLoaded, categories} = this.state;\r\n    return (\r\n      <Container>\r\n        <Jumbotron fluid>\r\n          <Container align=\"center\">\r\n            <h1>Emojipedia 🌍</h1>\r\n            <p>\r\n              Emojipedia is a project who contains all posibles Emojis in the world.\r\n            </p>\r\n            <i>Click on a Emoji to copy it!</i>\r\n          </Container>\r\n        </Jumbotron>\r\n\r\n        <Row md=\"auto\">\r\n          <Col>\r\n            <SearchBar fetchEmoji={this.fetchSearch.bind(this)}/>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Container align=\"center\">\r\n              <h1>Categories</h1>\r\n              <Categories action={this.fetchCategory.bind(this)} data={categories}/>\r\n            </Container>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Emojis loaded={isLoaded} search={search} data={datos} />\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Emojipedia;\r\n"]},"metadata":{},"sourceType":"module"}